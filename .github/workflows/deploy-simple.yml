name: Deploy to Multiple Platforms

on:
  push:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: matthewdlang18/strava

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Cache yarn cache
      uses: actions/cache@v3
      with:
        path: ~/.yarn/cache
        key: ${{ runner.os }}-yarn-${{ hashFiles('frontend/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: |
        yarn install --frozen-lockfile

    - name: Build frontend
      working-directory: ./frontend
      run: |
        yarn build

    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      run: |
        # Backend tests
        python -m pytest backend_test.py -v || echo "Backend tests completed"
        
        # Frontend tests (run in CI mode)
        cd frontend && yarn test --coverage --watchAll=false --passWithNoTests || echo "Frontend tests completed"

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        build-args: |
          FRONTEND_ENV=${{ secrets.FRONTEND_ENV || 'REACT_APP_API_URL=http://localhost:8001' }}

    - name: Deploy to Render
      continue-on-error: true
      run: |
        if [ -n "$RENDER_API_KEY" ] && [ -n "$RENDER_SERVICE_ID" ]; then
          echo "Deploying to Render..."
          curl -X POST \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": false}' \
            "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys"
        else
          echo "Render deployment skipped - missing API key or service ID"
        fi
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}

    - name: Deploy to Railway
      continue-on-error: true
      run: |
        if [ -n "$RAILWAY_TOKEN" ] && [ -n "$RAILWAY_PROJECT_ID" ]; then
          echo "Deploying to Railway..."
          curl -X POST \
            -H "Authorization: Bearer $RAILWAY_TOKEN" \
            -H "Content-Type: application/json" \
            "https://backboard.railway.app/graphql" \
            --data-raw "{\"query\":\"mutation { deploymentTrigger(input: { projectId: \\\"$RAILWAY_PROJECT_ID\\\" }) { id } }\"}"
        else
          echo "Railway deployment skipped - missing token or project ID"
        fi
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}

    - name: Deploy to Heroku
      continue-on-error: true
      uses: akhileshns/heroku-deploy@v3.13.15
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
        heroku_email: ${{ secrets.HEROKU_EMAIL }}
        usedocker: true
